name: V8 Release and Publish

on:
  push:
    tags:
      - "v*"

jobs:
  build-mac:
    name: Release V8 for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 1

      - name: Restore V8 Cache
        uses: actions/cache@v3
        with:
          path: |
            v8
            .gclient_entries
            .cipd
          key: ${{ runner.os }}:libv8:v8:${{ hashFiles('**/VERSION') }}

      - name: Restore CCache
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}:libv8:ccache:release:${{ hashFiles('**/VERSION') }}
          restore-keys: |
            ${{ runner.os }}:libv8:ccache:

      - name: Setup CCache
        run: |
          brew install ccache
          echo "CCACHE_CPP2=yes" >> $GITHUB_ENV
          echo "CCACHE_SLOPPINESS=time_macros" >> $GITHUB_ENV
          echo "$(brew --prefix ccache)/libexec" >> $GITHUB_PATH

      - name: Download V8 Source
        run: sh v8_download.sh

      - name: Compile V8
        run: sh v8_compile.sh

      - name: Archive Release
        id: archive_release
        run: |
          filename="v8_${{ runner.os }}_amd64"

          tar -C v8 -cf "$filename.tar" include/
          tar -rf "$filename.tar" libv8_monolith.a
          xz "$filename.tar"

          test -f "$filename.tar.xz" && ls -lh "$filename.tar.xz"

          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "archive=${filename}.tar.xz" >> $GITHUB_OUTPUT

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.archive_release.outputs.filename }}
          path: ${{ steps.archive_release.outputs.archive }}

  build-linux:
    name: Release V8 for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 1

      - name: Restore V8 Cache
        uses: actions/cache@v3
        with:
          path: |
            v8
            .gclient_entries
            .cipd
          key: ${{ runner.os }}:libv8:v8:${{ hashFiles('**/VERSION') }}

      - name: Restore CCache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}:libv8:ccache:release:${{ hashFiles('**/VERSION') }}
          restore-keys: |
            ${{ runner.os }}:libv8:ccache:

      - name: Setup CCache
        run: |
          sudo apt-get update && sudo apt-get install -yq ccache
          sudo update-ccache-symlinks
          echo "/usr/lib/ccache" >> $GITHUB_PATH

      - name: Download V8 Source
        run: sh v8_download.sh

      - name: Compile V8
        run: sh v8_compile.sh

      - name: Archive Release
        id: archive_release
        run: |
          filename="v8_${{ runner.os }}_amd64"

          tar -C v8 -cf "$filename.tar" include/
          tar -rf "$filename.tar" libv8_monolith.a
          xz "$filename.tar"

          test -f "$filename.tar.xz" && ls -lh "$filename.tar.xz"

          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "archive=${filename}.tar.xz" >> $GITHUB_OUTPUT

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.archive_release.outputs.filename }}
          path: ${{ steps.archive_release.outputs.archive }}

  build-windows:
    name: Release V8 for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 1

      - name: Restore V8 Cache
        uses: actions/cache@v3
        with:
          path: |
            v8
            .gclient_entries
            .cipd
          key: ${{ runner.os }}:libv8:v8:${{ hashFiles('**/VERSION') }}

      - name: Restore SCCache
        uses: actions/cache@v3
        with:
          path: ${{ env.LOCALAPPDATA }}\Mozilla\sccache
          key: ${{ runner.os }}:libv8:sccache:release:${{ hashFiles('**/VERSION') }}
          restore-keys: |
            ${{ runner.os }}:libv8:sccache:

      - name: Setup Scoop
        uses: MinoruSekine/setup-scoop@v1

      - name: Install SCCache
        run: scoop install sccache

      - name: Download V8 Source
        run: .\v8_download.ps1

      - name: Compile V8
        run: .\v8_compile.ps1

      - name: Archive Release
        id: archive_release
        shell: pwsh
        run: |
          $filename="v8_${{ runner.os }}_amd64"

          7z a ".\$filename.7z" .\include libv8_monolith.a

          Get-ChildItem -Path ".\$filename.7z" | Where-Object {
            -not $_.PSIsContainer
          } | Select-Object -Property Name, CreationTime, @{Name='Size(MB)'; Expression={[math]::round($_.Length / 1MB, 2)}}

          "filename=$filename" >> $Env:GITHUB_ENV
          "archive=${filename}.7z" >> $Env:GITHUB_ENV

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.archive_release.outputs.filename }}
          path: ${{ steps.archive_release.outputs.archive }}

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Download Archives
        uses: actions/download-artifact@v3

      - name: Upload Archive
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            *.tar.xz
            *.7z
